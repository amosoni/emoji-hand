generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String              @id @default(cuid())
  name                     String?
  email                    String?             @unique
  emailVerified            DateTime?
  image                    String?
  premiumExpireAt          DateTime?
  createdAt                DateTime            @default(now())
  creemCustomerId          String?
  points                   Int                 @default(0)
  updatedAt                DateTime            @updatedAt
  consecutiveCheckIns      Int                 @default(0)
  credits                  Int                 @default(0)
  dailyUsage               Json                @default("{}")
  imageGenerationUsesToday Int                 @default(0)
  lastCheckIn              DateTime?
  lastUsageReset           DateTime            @default(now())
  referralCode             String?             @unique
  referralCount            Int                 @default(0)
  referredBy               String?
  subscriptionExpireAt     DateTime?
  subscriptionPlan         String              @default("free")
  subscriptionStatus       String              @default("active")
  totalCreditsEarned       Int                 @default(0)
  totalCreditsSpent        Int                 @default(0)
  translationUsesToday     Int                 @default(0)
  passwordHash             String?
  accounts                 Account[]
  checkIns                 CheckIn[]
  creditTransactions       CreditTransaction[]
  emojiPackPurchases       EmojiPackPurchase[]
  emojiPackUsages          EmojiPackUsage[]
  posts                    Post[]
  sessions                 Session[]
  usageRecords             UsageRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmojiPackPurchase {
  id        String   @id @default(cuid())
  userId    String
  package   String
  credits   Int
  price     Float
  quantity  Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmojiPackUsage {
  id          String   @id @default(cuid())
  userId      String
  packCount   Int
  style       String?
  cost        Float
  createdAt   DateTime @default(now())
  costPerPack Float?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageRecord {
  id          String   @id @default(cuid())
  userId      String
  serviceType String
  creditsUsed Int
  cost        Float
  inputData   Json?
  outputData  Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  type        String
  amount      Int
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CheckIn {
  id            String   @id @default(cuid())
  userId        String
  date          DateTime @default(now())
  creditsEarned Int      @default(1)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
